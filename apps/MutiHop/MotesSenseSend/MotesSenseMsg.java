/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MotesSenseMsg'
 * message type.
 */

public class MotesSenseMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new MotesSenseMsg of size 28. */
    public MotesSenseMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MotesSenseMsg of the given data_length. */
    public MotesSenseMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg with the given data_length
     * and base offset.
     */
    public MotesSenseMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg using the given byte array
     * as backing store.
     */
    public MotesSenseMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MotesSenseMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MotesSenseMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg embedded in the given message
     * at the given base offset.
     */
    public MotesSenseMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MotesSenseMsg embedded in the given message
     * at the given base offset and length.
     */
    public MotesSenseMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MotesSenseMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [jump=0x"+Long.toHexString(get_jump())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldId=0x"+Long.toHexString(get_oldId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [oldCounter=0x"+Long.toHexString(get_oldCounter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msg=";
        for (int i = 0; i < 18; i++) {
          s += "0x"+Long.toHexString(getElement_msg(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (false).
     */
    public static boolean isSigned_nodeid() {
        return false;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: jump
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'jump' is signed (false).
     */
    public static boolean isSigned_jump() {
        return false;
    }

    /**
     * Return whether the field 'jump' is an array (false).
     */
    public static boolean isArray_jump() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'jump'
     */
    public static int offset_jump() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'jump'
     */
    public static int offsetBits_jump() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'jump'
     */
    public int get_jump() {
        return (int)getUIntBEElement(offsetBits_jump(), 16);
    }

    /**
     * Set the value of the field 'jump'
     */
    public void set_jump(int value) {
        setUIntBEElement(offsetBits_jump(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'jump'
     */
    public static int size_jump() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'jump'
     */
    public static int sizeBits_jump() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldId
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldId' is signed (false).
     */
    public static boolean isSigned_oldId() {
        return false;
    }

    /**
     * Return whether the field 'oldId' is an array (false).
     */
    public static boolean isArray_oldId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldId'
     */
    public static int offset_oldId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldId'
     */
    public static int offsetBits_oldId() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'oldId'
     */
    public int get_oldId() {
        return (int)getUIntBEElement(offsetBits_oldId(), 16);
    }

    /**
     * Set the value of the field 'oldId'
     */
    public void set_oldId(int value) {
        setUIntBEElement(offsetBits_oldId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldId'
     */
    public static int size_oldId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldId'
     */
    public static int sizeBits_oldId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: oldCounter
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'oldCounter' is signed (false).
     */
    public static boolean isSigned_oldCounter() {
        return false;
    }

    /**
     * Return whether the field 'oldCounter' is an array (false).
     */
    public static boolean isArray_oldCounter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'oldCounter'
     */
    public static int offset_oldCounter() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'oldCounter'
     */
    public static int offsetBits_oldCounter() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'oldCounter'
     */
    public int get_oldCounter() {
        return (int)getUIntBEElement(offsetBits_oldCounter(), 16);
    }

    /**
     * Set the value of the field 'oldCounter'
     */
    public void set_oldCounter(int value) {
        setUIntBEElement(offsetBits_oldCounter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'oldCounter'
     */
    public static int size_oldCounter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'oldCounter'
     */
    public static int sizeBits_oldCounter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msg
    //   Field type: short[], unsigned
    //   Offset (bits): 80
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msg' is signed (false).
     */
    public static boolean isSigned_msg() {
        return false;
    }

    /**
     * Return whether the field 'msg' is an array (true).
     */
    public static boolean isArray_msg() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'msg'
     */
    public static int offset_msg(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 18) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msg'
     */
    public static int offsetBits_msg(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 18) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'msg' as a short[]
     */
    public short[] get_msg() {
        short[] tmp = new short[18];
        for (int index0 = 0; index0 < numElements_msg(0); index0++) {
            tmp[index0] = getElement_msg(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'msg' from the given short[]
     */
    public void set_msg(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_msg(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'msg'
     */
    public short getElement_msg(int index1) {
        return (short)getUIntBEElement(offsetBits_msg(index1), 8);
    }

    /**
     * Set an element of the array 'msg'
     */
    public void setElement_msg(int index1, short value) {
        setUIntBEElement(offsetBits_msg(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'msg'
     */
    public static int totalSize_msg() {
        return (144 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'msg'
     */
    public static int totalSizeBits_msg() {
        return 144;
    }

    /**
     * Return the size, in bytes, of each element of the array 'msg'
     */
    public static int elementSize_msg() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'msg'
     */
    public static int elementSizeBits_msg() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'msg'
     */
    public static int numDimensions_msg() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'msg'
     */
    public static int numElements_msg() {
        return 18;
    }

    /**
     * Return the number of elements in the array 'msg'
     * for the given dimension.
     */
    public static int numElements_msg(int dimension) {
      int array_dims[] = { 18,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'msg' with a String
     */
    public void setString_msg(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_msg(i, (short)s.charAt(i));
         }
         setElement_msg(i, (short)0); //null terminate
    }

    /**
     * Read the array 'msg' as a String
     */
    public String getString_msg() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,18)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_msg(i) == (char)0) break;
             carr[i] = (char)getElement_msg(i);
         }
         return new String(carr,0,i);
    }

}
